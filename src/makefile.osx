# -*- mode: Makefile; -*-
# Copyright (c) 2011 Bitcoin Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for procurrency
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CXX=llvm-g++
DEPSDIR=/usr/local

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include" \
 -I"/usr/local/opt/openssl/include"
 
LIBPATHS= \
 -L"$(DEPSDIR)/lib"
 
USE_UPNP:=1

LIBS= -dead_strip

ifdef STATIC
# Build STATIC if you are redistributing the procd binary
LIBS += \
 $(DEPSDIR)/lib/libdb_cxx-6.1.a \
 $(DEPSDIR)/lib/libboost_system-mt.a \
 $(DEPSDIR)/lib/libboost_filesystem-mt.a \
 $(DEPSDIR)/lib/libboost_program_options-mt.a \
 $(DEPSDIR)/lib/libboost_thread-mt.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx-6.1 \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lssl \
 -lcrypto \
 -lz
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -arch x86_64 -stdlib=libc++ -O3 -msse2
else
CFLAGS = -arch x86_64 -stdlib=libc++ -g -msse2
endif

# proc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wno-ignored-qualifiers -Wformat-security -Wno-unused-parameter -Wunused-function -Wunused-variable -fpermissive -Wconversion-null -Wno-deprecated-declarations\
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    obj/alert.o \
	obj/allocators.o \
    obj/clientversion.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
	obj/base58.o \
    obj/crypter.o \
    obj/key.o \
	obj/pubkey.o \
    obj/eckey.o \
    obj/extkey.o \
    obj/init.o \
    obj/procd.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpcprotocol.o \
    obj/rpcserver.o \
    obj/rpcclient.o \
    obj/rpcnet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/rpcsmessage.o \
    obj/rpcextkey.o \
    obj/rpcmnemonic.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/smessage.o \
    obj/stealth.o \
    obj/ringsig.o \
    obj/core.o \
    obj/txmempool.o \
    obj/chainparams.o \
    obj/state.o \
	obj/crypto/hmac_sha256.o \
    obj/crypto/hmac_sha512.o \
    obj/crypto/ripemd160.o \
    obj/crypto/sha1.o \
    obj/crypto/sha256.o \
    obj/crypto/sha512.o \
	obj/support/cleanse.o \
    obj/bloom.o

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
        obj/db.o \
        obj/miner.o \
        obj/rpcdump.o \
        obj/rpcmining.o \
        obj/rpcwallet.o \
        obj/wallet.o \
        obj/walletdb.o
endif
	
ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
	LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
	LIBS += -lminiupnpc
endif
endif

all: procd

# build secp256k1
DEFS += $(addprefix -I,$(CURDIR)/secp256k1/include)
secp256k1/src/libsecp256k1_la-secp256k1.o:
	@echo "Building Secp256k1 ..."; cd secp256k1; chmod 755 *; ./autogen.sh; ./configure --enable-module-recovery; make; cd ..;
procd: secp256k1/src/libsecp256k1_la-secp256k1.o

# build leveldb
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
clientversion.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO
obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.c
	$(C) -c $(CFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)	  
	  
procd: $(OBJS:obj/%=obj/%)
	$(LINK) $(CFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)


TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

xTESTCXXFLAGS = -std=c++11

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(xTESTCXXFLAGS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

test_procurrency: $(TESTOBJS) $(filter-out obj/init.o obj/procd.o,$(OBJS:obj/%=obj/%))
	$(LINK) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS)

clean:
	-rm -f procd
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/build.h
	-rm -f test_proc
	-rm -f obj-test/*.o
	-rm -f obj-test/*.P
	-cd leveldb && $(MAKE) clean || true


FORCE:
